// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
  GUEST
}

enum EventOccurrence {
  SINGLE
  DAILY
  WEEKLY
  MONTHLY
  YEARLY
}

enum EventStatus {
  ACTIVE
  FINISHED
  CANCELLED
}

enum EventVisibility {
  PUBLIC
  PRIVATE
}

enum EventParticipantStatus {
  DECLINED
  PENDING
  ACCEPTED
}

enum TravelMode {
  DRIVING
  TRANSIT
  BICYCLING
  WALKING
}

model User {
  id                 Int                @id @default(autoincrement())
  email              String             @unique
  name               String?
  password           String
  role               UserRole           @default(USER)
  createdAt          DateTime           @default(now())
  eventsParticipated EventParticipant[]
  eventsCreated      Event[]
}

model Event {
  id           Int                @id @default(autoincrement())
  creator      User               @relation(fields: [creatorId], references: [id])
  creatorId    Int
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @default(now())
  title        String
  description  String?
  occurrence   EventOccurrence    @default(SINGLE)
  participants EventParticipant[]
  status       EventStatus        @default(ACTIVE)
  dateTime     DateTime
  locationId   Int?
  location     Place?             @relation("EventLocation", fields: [locationId], references: [id])
  visibility   EventVisibility    @default(PRIVATE)
}

model EventParticipant {
  id           Int                    @id @default(autoincrement())
  event        Event                  @relation(fields: [eventId], references: [id])
  eventId      Int
  user         User                   @relation(fields: [userId], references: [id])
  userId       Int
  assignedAt   DateTime               @default(now())
  updatedAt    DateTime               @default(now())
  status       EventParticipantStatus @default(PENDING)
  travelPlan   TravelPlan?
  travelPlanId Int?                   @unique

  @@unique([userId, eventId])
}

model TravelPlan {
  id                 Int              @id @default(autoincrement())
  eventParticipant   EventParticipant @relation(fields: [eventParticipantId], references: [id])
  eventParticipantId Int              @unique
  plannedAt          DateTime         @default(now())
  origin             String
  destination        String
  totalCo2           Float
  travelMode         TravelMode
  travelSteps        Json[]
  routeDetails       Json
}

model Place {
  id            Int      @id @default(autoincrement())
  googlePlaceId String   @unique
  latitude      Float
  longtitude    Float
  name          String?
  address       String?
  createdAt     DateTime @default(now())
  events        Event[]  @relation("EventLocation")
}

model emissionFactor {
  id          Int    @id @default(autoincrement())
  vehicleType String @unique
  value       Int
}
