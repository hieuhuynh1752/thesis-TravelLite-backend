// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
  GUEST
}

enum EventOccurrence {
  SINGLE
  DAILY
  WEEKLY
  MONTHLY
  YEARLY
}

enum EventStatus {
  DRAFT
  ACTIVE
  FINISHED
  CANCELLED
}

enum EventParticipantStatus {
  DECLINED
  PENDING
  ACCEPTED
}

enum TravelMode {
  DRIVING
  TRANSIT
  BICYCLING
  WALKING
}

model User {
  id                 Int                @id @default(autoincrement())
  email              String             @unique
  name               String?
  password           String
  role               UserRole           @default(USER)
  createdAt          DateTime           @default(now())
  eventsParticipated EventParticipant[]
  eventsCreated      Event[]
}

model Event {
  id           Int                @id @default(autoincrement())
  creator      User               @relation(fields: [creatorId], references: [id])
  creatorId    Int
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @default(now())
  title        String
  description  String?
  occurrence   EventOccurrence    @default(SINGLE)
  participants EventParticipant[]
  status       EventStatus        @default(DRAFT)
  dateTime     DateTime
  locationId   Int?
  location     Place?             @relation("EventLocation", fields: [locationId], references: [id])
  travelPlans  TravelPlan[]
}

model EventParticipant {
  id         Int                    @id @default(autoincrement())
  event      Event                  @relation(fields: [eventId], references: [id])
  eventId    Int
  user       User                   @relation(fields: [userId], references: [id])
  userId     Int
  assignedAt DateTime               @default(now())
  updatedAt  DateTime               @default(now())
  status     EventParticipantStatus @default(PENDING)
  travelPlan TravelPlan?

  @@unique([userId, eventId])
}

model TravelPlan {
  id                 Int        @id @default(autoincrement())
  eventId            Int
  eventParticipantId Int        @unique
  originPlaceId      Int
  destinationPlaceId Int
  travelMode         TravelMode
  plannedAt          DateTime   @default(now())
  waypoints          Waypoint[]

  event            Event            @relation(fields: [eventId], references: [id])
  eventParticipant EventParticipant @relation(fields: [eventParticipantId], references: [id])
  origin           Place            @relation("Origin", fields: [originPlaceId], references: [id])
  destination      Place            @relation("Destination", fields: [destinationPlaceId], references: [id])
}

model Place {
  id                     Int          @id @default(autoincrement())
  googlePlaceId          String       @unique
  name                   String?
  address                String?
  createdAt              DateTime     @default(now())
  waypoints              Waypoint[]
  events                 Event[]      @relation("EventLocation")
  originTravelPlans      TravelPlan[] @relation("Origin")
  destinationTravelPlans TravelPlan[] @relation("Destination")
}

model Waypoint {
  id           Int     @id @default(autoincrement())
  travelPlanId Int
  placeId      Int
  stopOrder    Int?
  notes        String?

  travelPlan TravelPlan @relation(fields: [travelPlanId], references: [id])
  place      Place      @relation(fields: [placeId], references: [id])
}
